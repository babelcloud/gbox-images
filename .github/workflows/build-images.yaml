name: Build Gbox Images

on:
  # 1. Manual trigger, allowing users to select modules & tags
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag (Default: Commit SHA)"
        type: string
        required: false
        default: ""
      base:
        description: "Build module: base"
        type: boolean
        required: false
        default: false
      playwright:
        description: "Build module: playwright"
        type: boolean
        required: false
        default: false
      push:
        description: "push to registry"
        type: boolean
        required: false
        default: false

  # 2. Any push or PR should run the build (but may not push)
  push:
    branches: ["**"]
    tags: ["*"]
  pull_request:

jobs:
  # ------------------------------------------------------------
  # Prepare a dynamic build matrix based on build_config (manual)
  # or default to all modules (CI builds)
  # ------------------------------------------------------------
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: check-jq
        name: Check for jq
        run: |
          if command -v jq >/dev/null 2>&1; then
            echo "has_jq=true" | tee -a "$GITHUB_OUTPUT"
          else
            echo "has_jq=false" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: Install jq
        if: steps.check-jq.outputs.has_jq == 'false'
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - id: set-matrix
        name: Generate build matrix
        run: |
          # Detect configuration source
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Build config based on selected module booleans
            CONFIG='{}'
            TAG_INPUT='${{ github.event.inputs.tag }}'

            if [[ "${{ github.event.inputs.base }}" == 'true' ]]; then
              CONFIG=$(echo "$CONFIG" | jq --arg tag "$TAG_INPUT" '. + {base: $tag}')
            fi
            if [[ "${{ github.event.inputs.playwright }}" == 'true' ]]; then
              CONFIG=$(echo "$CONFIG" | jq --arg tag "$TAG_INPUT" '. + {playwright: $tag}')
            fi

            # Fail if no module selected
            if [[ "$CONFIG" == '{}' ]]; then
              echo "❌ At least one module (base/playwright) must be selected." >&2
              exit 1
            fi
          else
            # Default: all known modules with empty tag => auto SHA later
            CONFIG=$(jq -n '{base:"",playwright:""}')
          fi

          echo "Using config: $CONFIG"

          # Convert the object {module:tag} -> [{"module":"...","tag":"..."}, ...]
          MATRIX=$(echo "$CONFIG" | jq -c '{include: [to_entries[] | {module: .key, tag: .value}] }')
          echo "matrix=$MATRIX" | tee -a "$GITHUB_OUTPUT"

  build:
    needs: prepare
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write # Required for ghcr.io
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: babelcloud/gbox-${{ matrix.module }}
      PUSH_IMAGE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.push == 'true') || (github.event_name == 'push' && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_TOKEN_USER }}
          password: ${{ secrets.GH_TOKEN }}

      - id: set-tag
        name: Compute Image Tag
        run: |
          # Priority:
          # 1) Provided via workflow_dispatch
          # 2) Git tag name
          # 3) Commit SHA
          TAG="${{ matrix.tag }}"
          if [[ -z "$TAG" ]]; then
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              TAG="${GITHUB_REF##*/}"
            else
              TAG="$(git rev-parse --short HEAD)"
            fi
          fi
          echo "tag=$TAG" | tee -a "$GITHUB_OUTPUT"
          # Flag whether to also apply the floating 'main' tag
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is_main=true" | tee -a "$GITHUB_OUTPUT"
          fi

      # Prepare tag list for build-push-action
      - id: tags
        name: Compose tag list
        run: |
          IMAGE="$REGISTRY/$IMAGE_NAME"
          TAGS="$IMAGE:${{ steps.set-tag.outputs.tag }}"
          if [[ "${{ steps.set-tag.outputs.is_main }}" == "true" && "${PUSH_IMAGE}" == "true" ]]; then
            TAGS="$TAGS,$IMAGE:main"
          fi
          echo "list=$TAGS" | tee -a "$GITHUB_OUTPUT"

      # ---- Build & (optionally) Push using docker/build-push-action ------------------------
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.module }}
          file: ${{ matrix.module }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ env.PUSH_IMAGE }}
          tags: ${{ steps.tags.outputs.list }}
          provenance: false
          labels: |
            org.opencontainers.image.version=${{ steps.set-tag.outputs.tag }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          annotations: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          cache-from: type=registry,ref=ghcr.io/babelcloud/gbox-${{ matrix.module }}:buildcache
          cache-to: type=registry,ref=ghcr.io/babelcloud/gbox-${{ matrix.module }}:buildcache,mode=max
